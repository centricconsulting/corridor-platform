using System;
using System.IO;
using System.Security.Cryptography;


namespace ST_ac099c5252f547cab600b9011971c4d7
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{


    public void Main()
    {

      string FilePath = Dts.Variables["User::file_path"].Value.ToString();
      string TrunkFolderPath = Dts.Variables["User::received_root_folder"].Value.ToString();

      string FileHash = GetFileHash(FilePath);
      string FileGuid = GetFileGuid();
      string FileName = GetFileName(FilePath);
      string FolderPath = GetFolderPath(FilePath);
      string FolderBranch = GetFolderBranch(FilePath, TrunkFolderPath);
      string ArchiveFileName = GetArchiveFileName(FilePath, FileGuid);
      DateTime CreateTimestamp = GetCreateTimestamp(FilePath);
      DateTime LastModifiedTimestamp = GetLastModifiedTimestamp(FilePath);

      Dts.Variables["User::file_hash"].Value = FileHash;
      Dts.Variables["User::file_guid"].Value = FileGuid;
      Dts.Variables["User::file_name"].Value = FileName;
      Dts.Variables["User::folder_branch"].Value = FolderBranch;
      Dts.Variables["User::file_created_dtm"].Value = CreateTimestamp;
      Dts.Variables["User::file_modified_dtm"].Value = LastModifiedTimestamp;
      Dts.Variables["User::folder_path"].Value = FolderPath;
      Dts.Variables["User::archive_file_name"].Value = ArchiveFileName;

      Dts.TaskResult = (int)ScriptResults.Success;


    }

    /// <summary>File name component of the file specified in the FilePath.</summary>
    /// <returns>Returns the file name with a path.</returns>
    public string GetFileName(string FilePath)
    {
      return System.IO.Path.GetFileName(FilePath);
    }

    /// <summary> File name component of the file specified in the FilePath. </summary>
    /// <returns>Returns the file name with a path.</returns>
    public string GetFileGuid()
    {
      return Guid.NewGuid().ToString().Replace("-", String.Empty).ToString().ToUpper();
    }

    /// <summary> File name component of the file specified in the FilePath. </summary>
    /// <returns>Returns the file name with a path.</returns>
    public string GetFileHash(string FilePath)
    {
      FileStream fs = System.IO.File.OpenRead(FilePath);

      MD5 md5hasher = MD5.Create();
      byte[] hash = md5hasher.ComputeHash(fs);

      md5hasher.Clear();
      fs.Close();

      return BitConverter.ToString(hash).Replace("-", String.Empty).ToUpper();
    }

    /// <summary> File extension of the file specified in the FilePath. </summary>
    /// <returns></returns>
    public string GetFileExtension(string FilePath)
    {
      return System.IO.Path.GetExtension(FilePath);
    }

    /// <summary> File name of the file specified in the FilePath excluding the file extension suffix. </summary>
    /// <returns></returns>
    public string GetFileNameWithoutExtension(string FilePath)
    {
      // note that the extension has a "." prefix
      return System.IO.Path.GetFileNameWithoutExtension(FilePath);
    }

    /// <summary> Unique file name comprised the original file name and the file hash. </summary>
    /// <returns></returns>
    public string GetArchiveFileName(string FilePath, string FileGuid)
    {
      return String.Format("{0}_{1}{2}",
        this.GetFileNameWithoutExtension(FilePath),
        FileGuid, this.GetFileExtension(FilePath));
    }

    /// <summary> Directory component of the file specified in the FilePath. </summary>
    /// <returns></returns>
    public string GetFolderPath(string FilePath)
    {
      return System.IO.Path.GetDirectoryName(FilePath);
    }

    /// <summary> Date and time at which the file was created. </summary>
    /// <returns></returns>
    public DateTime GetCreateTimestamp(string FilePath)
    {
      return System.IO.File.GetCreationTime(FilePath);
    }

    /// <summary> Date and time at which the file was last modified. </summary>
    /// <returns></returns>
    public DateTime GetLastModifiedTimestamp(string FilePath)
    {
      return System.IO.File.GetLastWriteTime(FilePath);
    }


    /// <summary>
    /// Determines the branch (section of the folder path) within the trunk folder path and excluding the file name. 
    /// </summary>
    /// <param name="FilePath"></param>
    /// <param name="TrunkFolderPath"></param>
    /// <returns></returns>
    public string GetFolderBranch(String FilePath, string TrunkFolderPath)
    {
      // determine the file folder path
      string FolderPath = this.GetFolderPath(FilePath);
      string FileName = this.GetFileName(FilePath);

      if (FolderPath.StartsWith(TrunkFolderPath, StringComparison.OrdinalIgnoreCase))
      {
        return FolderPath.Substring(TrunkFolderPath.Length + 1);
      }
      else
      {
        return FilePath;
      }
    }


    #region ScriptResults declaration
    /// <summary>
    /// This enum provides a convenient shorthand within the scope of this class for setting the
    /// result of the script.
    /// 
    /// This code was generated automatically.
    /// </summary>
    enum ScriptResults
    {
      Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
      Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
    };
    #endregion

  }
}