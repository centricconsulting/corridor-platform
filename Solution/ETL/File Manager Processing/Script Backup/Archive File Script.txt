using System;
using System.IO;
using Microsoft.SqlServer.Dts.Runtime;

namespace ST_6dcce2eeeaad4a6cafb8c4bfaf485614
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{

		public void Main()
		{

      // load values from variables
      string FilePath = Dts.Variables["User::file_path"].Value.ToString();
      string FolderBranch = Dts.Variables["User::folder_branch"].Value.ToString();
      string ArchiveFileName = Dts.Variables["User::archive_file_name"].Value.ToString();
      string RejectedRootFolderPath = Dts.Variables["User::rejected_root_folder"].Value.ToString();
      string AcceptedRootFolderPath = Dts.Variables["User::accepted_root_folder"].Value.ToString();
      bool FileProcessSuccessFlag = (bool)Dts.Variables["User::file_process_success_flag"].Value;

      // determine where archive target file path
      string ArchiveRootFolderPath = (FileProcessSuccessFlag) ? AcceptedRootFolderPath : RejectedRootFolderPath;
      string ArchiveFilePath = Path.Combine(ArchiveRootFolderPath, FolderBranch, ArchiveFileName);

      // get the folder path for the archvie target file
      string ArchiveFolderPath = Path.GetDirectoryName(ArchiveFilePath);

      // ensure the target director exists
      if (!Directory.Exists(ArchiveFolderPath))
      {
        Directory.CreateDirectory(ArchiveFolderPath);
      }

      // move the file to the archive location
      File.Move(FilePath, ArchiveFilePath);

      Dts.Variables["User::archive_folder_path"].Value = ArchiveFolderPath;

      Dts.TaskResult = (int)ScriptResults.Success;
		}


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}